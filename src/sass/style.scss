
body {
  // -apple-system, blinkmacsystemfont, Segoe UI : OSによって最適なシステムフォントを選択
  font-family: Noto Sans JP, -apple-system, blinkmacsystemfont, Segoe UI, Hiragino Kaku Gothic ProN, BIZ UDPGothic, meiryo, sans-serif;
  // "root em" の略で、ルート要素（通常は <html> 要素）のフォントサイズに対する相対的な大きさ
  // ルート要素のフォントサイズが 16px に設定されている場合、1rem は 16px
  font-size: 1.0625rem;
  // フォントの太さ400（標準）
  font-weight: 400;
  // わずかに文字間を開ける
  // 例えば、body 要素の font-size が 1.0625rem であった場合
  // .02em はその 0.02倍 の長さの間隔が各文字の間に追加
  letter-spacing: .02em;
  // 行の高さを1.7
  line-height: 1.7;
  // テキストの透明度を1（不透明）
  --tw-text-opacity: 1;
  // テキストカラー（透明度を--tw-text-opacityの値に基づいて調整）
  color: rgb(51 51 51 / var(--tw-text-opacity));
  // 表示形式flexboxレイアウト
  display: flex;
  // flexbox縦方向
  flex-direction: column;
  /* ブラウザのウィンドウサイズを変更すると、ビューポートの高さの100％相当に変更される
     つまり現在のブラウザウィンドウの高さ全体を表す
     ウェブページのコンテンツがどれだけ少なくても、
     <body> 要素の高さは常にブラウザウィンドウの高さ全体を占める*/
  min-height: 100vh;
}

/* -------------------------------------------------
ヘッダー 
----------------------------------------------------*/

header {
  // 白色（100%明度）で透明度88%
  background-color: hsla(0, 0%, 100%, .88);
  // ヘッダーを スクロールに応じて固定
  position: sticky;
  // 上端（top）を基準に 0pxの位置
  top: 0;
  // ヘッダーの重なり順を最前面に指定
  z-index: 1;
}

.header__inner {
  // ヘッダーの内部コンテナを親要素内で水平方向に中央揃え
  margin-left: auto;
  margin-right: auto;
  // ヘッダーの内部コンテナが画面幅いっぱいに広がりすぎないように
  max-width: 90rem;
  // コンテンツが画面の端にぴったりと表示されないように
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  // ヘッダーの内部コンテナが親要素の幅いっぱいに広がるように
  width: 100%;
}

// タイトルを左側、ドロップダウンメニューを右側に配置
.header__content {
  // 垂直方向の中央に配置
  align-items: center;
  display: flex;
  height: var(--header-block-size);
  // ヘッダーコンテンツ内のアイテムを左右両端に配置し、中央にスペースを空ける
  justify-content: space-between;
}

// 中央揃え
// ヘッダーの項目、「ホーム」と区切り線、地球儀と「Language」と下矢印
.header__nav, .header-menu, .language-selector__button {
  display: flex;             
  align-items: center;       
  gap: .5rem;
}

// ヘッダーのタイトルのフォント、配置設定
.header-title {
  margin-left: auto;
  margin-right: auto;
  font-size: 1.5rem;
  font-weight: 700;
  letter-spacing: .02em;
  width: 100%;
}

// 最初は非表示（画面サイズによって変更）
.header__menu--desktop-only, .header-menu__item.header-menu__item--divider {
  display: none;
}

/* -------------------------------------------------
言語選択「日本語」「English」
 地球儀と「Language」と下矢印
----------------------------------------------------*/
.language-selector {
  position: relative;
}

.language-selector__button {
  align-items: center;
  border-radius: calc(infinity* 1rem);
  display: flex;
  font-size: .875rem;
  font-weight: 400;
  gap: .25rem;
  letter-spacing: .02em;
  line-height: 1;
  min-height: 2.75rem;
  padding-left: .5rem;
  padding-right: .5rem;
  width: fit-content;
  --tw-text-opacity: 1;
  color: rgb(51 51 51 / var(--tw-text-opacity));
}

.language-selector__check-icon, .language-selector__language-icon svg {
  height: 1.25rem;
  width: 1.25rem;
}

/* 閉じているテキスト、アイコンを非表示 */
.language-selector__button[aria-expanded="false"] .language-selector__text--close {
  display: none;
}

/* 開いているので「閉じる関連」テキスト、アイコンを非表示 */
.language-selector__button[aria-expanded="true"] .language-selector__text--open {
  display: none;
}

.language-selector__button:hover {
  outline-color: #000;
  outline-style: dashed;
  outline-width: 1px;
}

// Languageをクリックしたときに表示される「日本語」「English」のボックス表示
.language-selector__list {
  border-radius: .5rem;
  border-width: 1px;
  left: 0;
  max-height: 18.875rem;
  min-width: fit-content;
  overflow: auto;
  position: absolute;
  top: 100%;
  width: auto;
  --tw-border-opacity: 1;
  border-color: rgb(148 148 148 / var(--tw-border-opacity));
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
  padding-bottom: .5rem;
  padding-top: .5rem;
  --tw-shadow: 0 2px 8px 1px #0000001a, 0 1px 5px 0 #0000004d;
  --tw-shadow-colored: 0 2px 8px 1px var(--tw-shadow-color), 0 1px 5px 0 var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

.language-selector__link[aria-current=true] {
  --tw-bg-opacity: 1 !important;
  background-color: rgb(217 230 255/ 1) !important;
  font-weight: 700;
  --tw-text-opacity: 1 !important;
  color: rgb(0 17 143/ 1) !important;
}

.language-selector__link {
  align-items: center;
  column-gap: .5rem;
  display: flex;
  position: relative;
  text-wrap: nowrap;
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255/ 1)!important;
  font-size: 1rem;
  font-weight: 400;
  letter-spacing: .02em;
  line-height: 1;
  padding: .75rem 1.5rem .75rem .75rem;
  --tw-text-opacity: 1;
  color: rgb(51 51 51/ 1)!important;
}

// 閉じる状態のテキスト要素のうち、言語が日本語である場合
.header-item__text--close:lang(ja), .header-item__text--open:lang(ja) {
  // 最小幅
  min-width: 7.125rem;
}

/* -------------------------------------------------
ヘッダードロップダウンメニュー
----------------------------------------------------*/

// 「ホーム」と区切り線、ハンバーガーアイコンと「すべてのメニュー」
.header-item {
  align-items: center;
  // 要素の角を可能な限り丸くして、要素を完全な円形または楕円形にする
  border-radius: calc(infinity* 1rem);
  // テキスト、アイコンを横並び
  display: flex;
  font-size: .875rem;
  font-weight: 400;
  gap: .5rem;
  letter-spacing: .02em;
  line-height: 1;
  min-height: 2rem;
  padding: .5rem;
  text-align: center;
  text-wrap: nowrap;
}

//  ドロップダウンメニュー「ハンバーガーアイコンとすべてのメニュー」←→「×メニューを閉じる」表示切り替え
.header-item__toggle[aria-expanded=false] .header-item__icon--close,
.header-item__toggle[aria-expanded=true] .header-item__icon--open,
.header-item__toggle[aria-expanded=false] .header-item__text--close,
.header-item__toggle[aria-expanded=true] .header-item__text--open {
  display: none;
}

// ハンバーガーアイコンと閉じる（×）アイコン
.header-item__icon {
  display: flex;
  height: 1rem;
  // 要素の垂直方向の移動量
  --tw-translate-y: 0.0625rem;
  // flexboxレイアウトにおける垂直方向のアイテムの整列方法
  align-items: center;
  // アイコンの変換（移動、回転、歪み、拡大縮小）を定義
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.header-dropdown {
  // ドロップダウンメニューの上部のボーダーの太さを1pxに設定
  border-top-width: 1px;
  /* ドロップダウンメニューの左端を、
     その親要素（position: relative, absolute, fixed のいずれかが設定されている要素）の左端に揃える */
  left: 0;
  /* ドロップダウンメニュー絶対配置：
      通常のドキュメントフローから外れ、最も近い position プロパティが relative, absolute, fixed の
      いずれかに設定されている祖先要素を基準に配置。基準がない場合は<html>要素を基準に配置 */
  position: absolute;
  // ドロップダウンメニューの右端を、その親要素の右端に揃える
  right: 0;
  // ドロップダウンメニューの上端を、その親要素の上端から 4.5rem 下に配置
  top: 4.5rem;
  // 前面に表示
  z-index: 1;
  // ボーダーの透明度を 1（不透明）
  --tw-border-opacity: 1;
  // 背景色を HSLA カラーモデル：88%不透明度の白色に設定
  background-color: hsla(0, 0%, 100%, .88);
  // ドロップダウンメニューのボーダーの色を RGB カラーモデル：216, 216, 216 のグレーに設定、透明度は上記
  border-color: rgb(216 216 216 / var(--tw-border-opacity));
  /* 影
     0: 水平方向のオフセット（影を左右にずらさない）
     0.25rem: 垂直方向のオフセット（影を下に 0.25rem ずらす）
     0.25rem: ぼかしの半径（影を 0.25rem ぼかす）
     0: 広がりの半径（影を広げない）
     rgba(0, 0, 0, .16): 影の色（黒色で 16% の透明度）*/
  --tw-shadow: 0 0.25rem 0.25rem 0 rgba(0, 0, 0, .16);
  // --tw-shadow-color が設定されていないため、実質的には --tw-shadow と同じ効果
  --tw-shadow-colored: 0 0.25rem 0.25rem 0 var(--tw-shadow-color);
  // ドロップダウンメニューに影
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

// ドロップダウンのコンテナ
.header-dropdown__container {
  // 水平方向、中央揃え
  margin-left: auto;
  margin-right: auto;
  /* 高さ calc(): 値を計算 */
  max-height: calc(100dvh - var(--header-block-size));
  max-width: 74.375rem;
  // コンテナの内容がコンテナの高さからはみ出す場合に、垂直方向のスクロールバーを表示
  overflow-y: auto;
  padding: 3rem 1.5rem 4rem;
  // スクロールバーの表示/非表示によってレイアウトが変動するのを防ぐ
  scrollbar-gutter: stable;
  width: 100%;
}

// ドロップダウンコンテナ内の各項目
.header-dropdown-list__external-link, .header-dropdown-list__item {
  margin-bottom: .5rem;
}
.header-dropdown-list__external-link, .header-dropdown-list__link {
  align-items: center;
  border-radius: 1rem;
  display: flex;
  font-weight: 500;
  justify-content: space-between;
  min-height: 3rem;
  padding: .5rem 1.25rem;
}



// ドロップダウンコンテナ内の矢印アイコン
.header-dropdown-list__link .icon--link {
  align-items: center;
  border-radius: 624.9375rem;
  border-width: 1px;
  display: inline-flex;
  flex: none;
  height: 1.5rem;
  justify-content: center;
  width: 1.5rem;
  --tw-border-opacity: 1;
  // 青の囲い円
  border-color: rgb(0 17 143 / var(--tw-border-opacity));
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
  --tw-text-opacity: 1;
  color: rgb(0 17 143 / var(--tw-text-opacity));
}

// ドロップダウンコンテナ内の区切り「|」
.header-dropdown-list__item [data-content="|"], .header-dropdown-list__item--desktop-only {
  display: none;
}

/* -------------------------------------------------
メイン
----------------------------------------------------*/
.template__main {
  margin: 3rem auto 9rem;
  max-width: 77.375rem;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  width: 100%;
}

// メインの各項目のヘッダー回りのマージン
.section {
  margin-bottom: 2rem;
  margin-top: 4rem;
}

.section:nth-child(2) {
  margin-top: 0;
}

// メインの各項目のヘッダー
.section__header {
  align-items: center;
  display: flex;
  gap: .75rem;
  justify-content: space-between;
  margin-bottom: 2rem;
  // headerのz-index:1が適用されるように、main.sectionにも指定
  z-index: auto;
}

// メインの各項目のタイトルフォント
.section__title {
  font-size: 1.375rem;
  font-weight: 700;
  letter-spacing: .02em;
  line-height: 1.5;
}

// トップの見出しの内容全体（お知らせなど）
.attention {
  list-style-type: disc;
  margin-bottom: 1rem;
  margin-top: 1rem;
  padding-left: 2rem;
}

// トップの見出しの内容一つ一つ
/* .attention-item__link クラスを持つ要素のうち、
.attention-item__text--isInformation クラスを持つ子要素が対象
:has() は、指定されたセレクターを持つ要素を選択、古いブラウザではサポートされていない場合がある
:hover により、マウスが要素の上にある状態を指定
*/
.attention-item__link:has(.attention-item__text--isInformation), .attention-item__link:not(.no-link):has(.attention-item__text--isInformation):hover {
  // テキストの透明度を 1にして、
  --tw-text-opacity: 1;
  // 特定の濃い青色にする
  color: rgb(0 17 143 / var(--tw-text-opacity));
}
// .attention-item__link クラスを持ち、.no-link クラスを持たない要素
.attention-item__link:not(.no-link) {
  // テキストに下線
  text-decoration-line: underline;
  // テキストから下線の距離を調整
  text-underline-offset: .1875rem;
}

// カード形式のデザイン
.card {
  // カードの角を丸
  border-radius: 1.5rem;
  // カードの枠線の幅を1ピクセル
  border-width: 1px;
  display: grid;
  height: 100%;
  // カードのコンテンツがカードの領域を超えた場合に、超えた部分を非表示
  overflow: hidden;
  --tw-border-opacity: 1;
  border-color: rgb(0 0 0 / var(--tw-border-opacity));
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}
/* カード内に画像がある場合に、グリッドレイアウトの行のサイズを調整
    1. 最初の行（画像の行など）は、コンテンツの最小サイズで表示されます。
    2. 2番目の行（コンテンツの行）は、残りのスペースをすべて埋めて表示されます。*/
.card:has(.card__image) {
  // 行の高さをコンテンツの最小の高さ、残りのスペースを1つの行に割り当て
  grid-template-rows: min-content 1fr;
}

.anchor-card, a.card {
  --tw-text-opacity: 1;
  color: rgb(51 51 51 / var(--tw-text-opacity));
  text-decoration-line: none;
}

.card__image {
  border-bottom-width: 1px;
  overflow: hidden;
  --tw-border-opacity: 1;
  border-bottom-color: rgb(0 0 0 / var(--tw-border-opacity));
}

/* -------------------------------------------------
スイッチ
----------------------------------------------------*/
.main-button {
  padding: 10px 15px;
  margin: 5px;
}

.btn-real-dent {
  /*周りの凹み*/
  mix-blend-mode: multiply;
  display: inline-block;
  position: relative;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: 
      radial-gradient(#FFF 0.1%, #72736f 20%, #bfbfbf 100%);
    background-size: 400% 400%;
    background-position: 44% 55%;
}

.btn-real-dent span {
  /* ボタン自体 */
  position: absolute;
  content: '';
  width: 70px;
  height: 70px;
  left: 15px;
  top: 15px;
  border-radius: 50%;
  background: url("../images/Button/seigaiha.jpg");
  background-size: 1150%;
  background-repeat: no-repeat;
  background-position: center;
  box-shadow: 0 0 0 1px #EADAB6;
}

 /* マウスオーバーのボタン */
.btn-real-dent .fa:hover {
  background: url("../images/Button/seigaiha.jpg");
  background-size: 1150%;
  background-repeat: no-repeat;
  background-position: center;
 box-shadow: 0 0 0 1px #FFFEF7;
}

  /* クリック後のボタン */
.btn-real-dent .fa.clicked {
  width: 68px;
  height: 68px;
  left: 16px;
  top: 16px;
  background:
  radial-gradient(circle, rgb(242, 205, 77,0.2), rgb(218, 181, 103, 0.2)), /* 半透明の黄色 */
    url("Aggregation/src/images/Button/seigaiha.jpg");  /* 画像 */
    background-size: 1111%;
    background-repeat: no-repeat;
    background-position: center;
    box-shadow: inset 0 0 0 2.5px rgba(66, 66, 66, 0.25); 
}

/* -------------------------------------------------
名前入力
----------------------------------------------------*/
.Form-text {
  border-top: 1px solid #ddd;
  p {
  margin: 1px;
  padding-top: 10px;
  padding-bottom: 0px;
  }
}

.Form-name {
  // 名前入力
  padding-top: 0px;
  padding-bottom: 24px;
  width: 100%;
  display: flex;
  align-items: center;
  border-bottom: 1px solid #ddd;
}
@media screen and (max-width: 480px) {
  .Form-name {
    padding-left: 14px;
    padding-right: 14px;
    padding-top: 5px;
    padding-bottom: 16px;
    flex-wrap: wrap;
  }
}

.Form-Item-Label {
  width: 100%;
  max-width: 248px;
  letter-spacing: 0.05em;
  font-weight: bold;
  font-size: 18px;
}
@media screen and (max-width: 480px) {
  .Form-Item-Label {
    max-width: inherit;
    display: flex;
    align-items: center;
    font-size: 15px;
  }
}

.Form-Item-Label-Required { //必須ラベル
  border-radius: 6px;
  margin-right: 8px;
  padding-top: 8px;
  padding-bottom: 8px;
  width: 48px;
  display: inline-block;
  text-align: center;
  background: #5bc8ac;
  color: #fff;
  font-size: 14px;
}
@media screen and (max-width: 480px) {
  .Form-Item-Label-Required {
    border-radius: 4px;
    padding-top: 4px;
    padding-bottom: 4px;
    width: 32px;
    font-size: 10px;
  }
}
.Form-Item-Input {
  border: 1px solid #ddd;
  border-radius: 6px;
  margin-left: 10px;
  padding-left: 1em;
  padding-right: 1em;
  height: 48px;
  flex: 1;
  width: 100%;
  max-width: 410px;
  background: #eaedf2;
  font-size: 18px;
}
@media screen and (max-width: 480px) {
  .Form-Item-Input {
    margin-left: 0;
    margin-top: 18px;
    height: 40px;
    flex: inherit;
    font-size: 15px;
  }
}

/* -------------------------------------------------
数字ボタン
----------------------------------------------------*/

button {
  padding: 10px 15px;
  margin: 5px;
  border: none;
  border-radius: 4px;
  background-color: #007BFF;
  color: white;
  cursor: pointer;
}

button:hover {
  outline-color: #000;
  outline-style: dashed;
  outline-width: 1px;
}

.number-button {
   padding: 10px 15px; 
   margin: 5px; 
   border: none; 
   border-radius: 4px; 
   background-color: #007BFF; 
   color: white; cursor: pointer; }

.number-buttons h2 {
  padding: 20px -10px 0px;
  margin: 20px -10px 0px;
}

.number-button.selected { 
  background-color: #0056b3; }

// 送信ボタン
.submit-button {
  text-align: center;
  margin-top: 20px;
}


/* -------------------------------------------------
画面前面にある要素
----------------------------------------------------*/

// 画面右下に常にあるトップに戻れるボタン
.template__pagetop {
  display: flex;
  // ページトップボタンを右側に配置
  justify-content: flex-end;
  padding-right: 1.25rem;
  pointer-events: none;
  width: 100vw;
}

/* ---------------------------------------------
リセットCSS

参考
*:      すべての<html>要素だけでなく、<body>、<div>、<p>など、ウェブページ内のすべての要素が対象
        すべての要素のボックスモデルをborder-boxに変更したり、マージンやパディングをリセットしたりする場合に使用
after:  疑似要素（要素の最後に追加される内容）
before: 疑似要素（要素の最初に追加される内容）
where:  セレクタリストを受け取り、その中のいずれかのセレクタに一致する要素を選択
        セレクタの特異度が 0 になるため、後から別のセレクタでスタイルを定義した場合に、特異度による競合が発生しにくくなる
------------------------------------------------- */

/* ボーダーおよびボックスの統一 */
*, :after, :before {
  /*  0:       ボーダーを非表示
      solid:   実線
      #e5e7eb: 薄い灰色
      すべての要素からデフォルトのボーダーを削除し、必要に応じて後から追加 */
  border: 0 solid #e5e7eb;
  /* border-box
  要素の幅と高さにパディングとボーダーが含まれるため計算しやすい。
  そのため、パディングやボーダーを追加しても、要素のサイズは変わらない
  レスポンシブデザインに対応しやすい
   */
  box-sizing: border-box;
}

/* ボタンのデザインをリセット */
// <input>要素のうち、typeがbutton, typeがreset, typeがsubmitである要素を選択
button, input:where([type=button]), input:where([type=reset]), input:where([type=submit]) {
  // <button>要素や<input type="button">などの要素が、ブラウザのデフォルトのボタンのスタイルで表示
  -webkit-appearance: button;
  // 上記互換性のために追加
  appearance: button;
  // ボタンの背景色を初期値の透明に設定しリセット
  background-color: initial;
  // 背景画像を無効にしリセット
  background-image: none;
}

/* 大文字小文字の変換をリセット
ブラウザによっては"TEST BUTTON"が大文字で表示されてしまったり、
"Test Option"の最初の文字だけが大文字で表示されてしまう可能性があるため */
button, select {
  text-transform: none;
}

/* ---------------------------------------------
レスポンシブデザイン
------------------------------------------------- */

// 「画面が48em（約768px）以上になったら
@media (min-width: 48em) {
  .section__header {
    // 子要素を左揃え
      justify-content: flex-start;
      margin-bottom: 3rem;
  }
}

// 「画面が64em（約1024px）以上になったら
@media (min-width: 64em) {
  .header__nav {
    // 右に少し詰める(マイナスマージン)
      margin-inline-end: -.3125rem;
  }
  // 1024px（64em）以上なら表示（「すべてのメニュー」以外の項目も表示）
  .header__menu--desktop-only {
    display: block;
  }

  .header-dropdown__container {
    padding-bottom: 3.5rem;
    padding-top: 2rem;
}
// ドロップダウンコンテナの各項目
.header-dropdown-list {
  column-gap: 1.625rem;
  display: grid;
  grid-auto-flow: column;
  grid-template-rows: repeat(4, minmax(0, 1fr));
}
// ドロップダウンコンテナの右側に作るサブメニュー項目
.header-dropdown__menu--divider {
  border-left-width: 1px;
  margin-left: 3.5rem;
  padding-left: 3.5rem;
}
}

// 「画面が80em（約1280px）以上になったら
@media (min-width: 80em) {
  // 子要素の間に 0.875rem の隙間
  .header-menu {
      gap: .875rem;
  }
  // 1280px（80em）以上なら表示
  .header-menu__item.header-menu__item--divider {
    display: block;
  }
}


/* ---------------------------------------------
デザインの統一性
・デフォルトの変数を設定
・親要素のスタイルと統一
参考
:root:      <html>要素のみを対象
            例えば、ウェブサイトの主要な色、フォント、間隔などをCSS変数として:rootに定義し、他のCSSルールから参照
::backdrop: 全画面表示(フルスクリーン)要素の背後に表示される疑似要素
            <video>要素全画面表示時やモーダルダイアログの背後にあるコンテンツを暗くしたり、ぼかしたり、その他の視覚効果を加えたりするために使用
::marker:   リストのマーカーに対してスタイルを適用
!important; 重要度を持つプロパティを設定
            他のスタイルよりも優先される
------------------------------------------------- */
/* HTMLの<button>要素はもちろん、role="button"が付与された要素に適用 */
[role=button], button {
  /* ポインター（手の形）*/
  cursor: pointer;
}

/*  */
  :root {
  --header-block-size: 4.5rem;
  }

/* リストのマーカーに対してスタイルを適用 */
::marker {
  // マーカーが周囲のテキストの双方向性に影響を受けない
  unicode-bidi: isolate;
  // 数字の幅を固定幅にし、縦に並べたときに桁が揃う
  font-variant-numeric: tabular-nums;
  // 自動的に大文字や小文字に変換されない
  text-transform: none;
  // テキスト方向の開始位置に配置するための設定、通常は左寄せ
  text-indent: 0px !important;
  text-align: start !important;
  // テキストの最後の行が、text-align プロパティと同じ配置方法を使用
  text-align-last: auto !important;
}

// アイコン（SVG）
.icon {
  // 親要素の color で指定された色を使う
  fill: currentColor;
  // 最小限の行の高さを指定し、アイコンの上下余白をなくす
  line-height: 1;
}

/* フォーム要素のスタイルを親要素のスタイルと統一 */
button, input, optgroup, select, textarea {
  // 文字色を親要素から継承
  color: inherit;
  // フォントファミリーを親要素から継承
  font-family: inherit;
  // フォント機能設定を親要素から継承
  font-feature-settings: inherit;
  // フォントサイズを親要素のフォントサイズの100%に設定
  font-size: 100%;
  // フォントバリエーション設定を親要素から継承
  font-variation-settings: inherit;
  // フォントの太さを親要素から継承
  font-weight: inherit;
  // 文字間隔を親要素から継承
  letter-spacing: inherit;
  // 行の高さを親要素から継承
  line-height: inherit;
  // 外側の余白（マージン）を0に設定
  margin: 0;
  // 内側の余白（パディング）を0に設定
  padding: 0;
}

/* フォーム要素のスタイルを親要素のスタイルと統一 */
audio, canvas, embed, iframe, img, object, svg, video {
  // 要素が横までいっぱいに広がり、縦に並んでいく
  display: block;
  // vertical-align: middle;
}

menu, ol, ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

// カード全体の上下のマージンとカードの間隔
.timeline .columns {
  display: grid;
  gap: 2rem;
  margin-top: 1.5rem;
}

.columns {
  display: grid;
  gap: 2rem;
}

blockquote, dd, dl, figure, h1, h2, h3, h4, h5, h6, hr, p, pre {
  margin: 0;
}

h1, h2, h3, h4, h5, h6 {
  font-size: inherit;
  font-weight: inherit;
}

a {
  color: inherit;
  text-decoration: inherit;
}

/* ---------------------------------------------
アクセシビリティ対応
------------------------------------------------- */
[hidden] {
  display: none;
}

// 視覚的に隠しつつ、スクリーンリーダーなどの支援技術には認識させる
.u-visually-hidden {
  height: 1px;
  margin: -1px;
  // 要素の内容が要素のボックスからはみ出さないようにする
  overflow: hidden;
  padding: 0;
  // 配置方法、絶対配置：要素はドキュメントフローから外れ、他の要素のレイアウトに影響を与えない
  position: absolute;
  width: 1px;
  // 要素の表示領域を完全に0ピクセルに設定し、視覚的に見えなくする
  clip: rect(0, 0, 0, 0);
  border-width: 0;
  // 要素内のテキストが折り返されない
  white-space: nowrap;
}
